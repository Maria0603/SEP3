@page "/profile"

@using client.DTO
@using client.DTO.Business
@using client.DTO.Customer
@using Stripe
@inject NavigationManager NavigationManager
@inject ICustomerService CustomerService
@inject IBusinessService BusinessService
@inject AuthStateProvider AuthStateProvider


<h1>Edit Profile</h1>
<div class="container">
    @if (businessProfile != null)
    {
    <EditForm Model="businessProfile" OnValidSubmit="UpdateBusinessProfile">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="businessName">Business Name</label>
            <InputText id="businessName" @bind-Value="businessProfile.BusinessName" class="form-control" />
        </div>
        <div>
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="businessProfile.Email" type="email" class="form-control" />
        </div>
        <div>
            <label for="phoneNumber">Phone Number</label>
            <InputText id="phoneNumber" @bind-Value="businessProfile.PhoneNumber" type="tel" class="form-control" />
        </div>
        <div>
        <label for="image">Business Image</label>
        <InputFile id="image" OnChange="UploadImage" class="form-control" />
</div>
        <button type="submit" class="btn btn-primary">Update</button>
        <button @onclick="Logout" class="btn btn-danger">Log Out</button>
    </EditForm>
    }
    else if (customerProfile != null)
    {
    <EditForm Model="customerProfile" OnValidSubmit="UpdateCustomerProfile">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="FirstName">First Name</label>
            <InputText id="firstname" @bind-Value="customerProfile.FirstName" class="form-control" />
        </div>
        <div>
            <label for="LastName">Last Name</label>
            <InputText id="lastname" @bind-Value="customerProfile.LastName" class="form-control" />
        </div>
        <div>
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="customerProfile.Email" type="email" class="form-control" />
        </div>
        <div>
            <label for="phoneNumber">Phone Number</label>
            <InputText id="phoneNumber" @bind-Value="customerProfile.PhoneNumber" type="tel" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Update</button>
        <button @onclick="Logout" class="btn btn-danger">Log Out</button>
    </EditForm>
    }
    else
    {
    <p>Loading profile... Please wait.</p>
    }

</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">@successMessage</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    
    <div class="alert alert-danger mt-3">@errorMessage</div>
}


@code {

    private async Task Logout()
    {
        await AuthStateProvider.LogoutAsync();
        NavigationManager.NavigateTo("/login", true);
    }


    private BusinessResponseDto businessProfile;
    private CustomerResponseDto customerProfile;
    private string successMessage;
    private string errorMessage;
    private byte[] newImage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string role = await AuthStateProvider.GetUserRoleAsync();

            if (role == "BUSINESS")
            {
                string businessId = await GetBusinessIdAsync();
                if (!string.IsNullOrEmpty(businessId))
                {
                    await LoadBusinessProfile(businessId);
                }
                
            }
            else if (role == "CUSTOMER")
            {
                string customerId = await GetCustomerIdAsync();
                if (!string.IsNullOrEmpty(customerId))
                {
                    await LoadCustomerProfile(customerId);
                }
                
            }
            else
            {
                errorMessage = "Invalid role. Unable to load profile.";
               
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            
        }
    }


    private async Task<string> GetBusinessIdAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var value = user.Claims.FirstOrDefault(c => c.Type == "userId")?.Value;
            if (!string.IsNullOrEmpty(value))
            {
                return value;
            }
        }

        throw new InvalidOperationException("User is not authenticated or business ID is missing.");
    }
    
    private async Task<string> GetCustomerIdAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var value = user.Claims.FirstOrDefault(c => c.Type == "userId")?.Value;
            if (!string.IsNullOrEmpty(value))
            {
                return value;
            }
        }

        throw new InvalidOperationException("User is not authenticated or customer ID is missing.");
    }

    private async Task LoadBusinessProfile(string businessId)
    {
        try
        {
            businessProfile = await BusinessService.GetBusinessByIdAsync(businessId);

            if (businessProfile == null)
            {
                errorMessage = "Failed to load business profile.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading profile: {ex.Message}";
        }
    }
    
    private async Task LoadCustomerProfile(string customerId)
    {
        try
        {
            customerProfile = await CustomerService.GetCustomerByIdAsync(customerId);

            if (customerProfile == null)
            {
                errorMessage = "Failed to load customer profile.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading profile: {ex.Message}";
        }
    }

    

    private async Task UpdateBusinessProfile()
    {
        try

        {
            BusinessUpdateRequestDto requestDto = new BusinessUpdateRequestDto()
            {
                Id = businessProfile.Id,
                Email = businessProfile.Email,
                PhoneNumber = businessProfile.PhoneNumber,
                BusinessName = businessProfile.BusinessName,
                ImageName = businessProfile.Logo_path,
                Image = newImage
                //Logo_path = businessProfile.Logo_path
            };


            BusinessResponseDto responseDto = await BusinessService.UpdateBusinessProfileAsync(requestDto);
            businessProfile.Email = requestDto.Email;
            businessProfile.PhoneNumber = businessProfile.PhoneNumber;
            //businessProfile.Logo_path = businessProfile.Logo_path;
            businessProfile.BusinessName = businessProfile.BusinessName;
            Console.WriteLine(responseDto);
            successMessage = "The profile has been successfully updated.";

        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating profile: {ex.Message}";
        }
    }

    private async Task UpdateCustomerProfile()
    {
        try

        {
            CustomerUpdateRequestDto requestDto = new CustomerUpdateRequestDto()
            {
                Id = customerProfile.Id,
                FirstName = customerProfile.FirstName,
                LastName = customerProfile.LastName,
                Email = customerProfile.Email,
                PhoneNumber = customerProfile.PhoneNumber,
            };
            
            CustomerResponseDto responseDto = await CustomerService.UpdateCustomerProfileAsync(requestDto);
            customerProfile.FirstName = customerProfile.FirstName;
            customerProfile.LastName = customerProfile.LastName;
            customerProfile.Email = requestDto.Email;
            customerProfile.PhoneNumber = customerProfile.PhoneNumber;
            
            Console.WriteLine(responseDto);
            successMessage = "The profile has been successfully updated.";

        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating profile: {ex.Message}";
        }
    }
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);

            newImage = memoryStream.ToArray(); // Save the byte array from the memory stream
        }
        catch (Exception ex)
        {
            errorMessage = $"Error uploading image: {ex.Message}";
        }
    }

    
    

}