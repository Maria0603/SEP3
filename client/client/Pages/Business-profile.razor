@page "/profile"

@using System.Net.Http.Headers
@using System.Text.Json
@using client.DTO
@inject NavigationManager NavigationManager
@inject AuthStateProvider AuthStateProvider

<style>
    .container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 50px;
        margin-right: 450px;
    }

    .buttons-column {
        display: flex;
        flex-direction: column;
        gap: 20px;
        align-items: flex-start;
        margin-bottom: 149px;
        margin-right: 100px;
    }

    .nav-button {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        padding: 10px 10px;
        width: 150px;
        text-align: left;
        cursor: pointer;
        border: 1px solid lightgray;
        box-shadow: 2px 2px 0 0 white, 4px 4px 0 0 lightgray;
        transition-duration: 0.2s;
        background-color: #f9f9f9;
        gap: 10px;
    }
    .nav-button img {
        flex-shrink: 0; 
    }

    .nav-button:hover {
        box-shadow: 3px 3px 0 0 white, 6px 6px 0 0 #d11049;
        transform: translate(-2px, -2px);
        }
        
    .nav-button:active {
        color: #d11049;
        background-color: white;
        border-color: lightgray;
    }

    .form-column {
        padding: 20px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 8px;
        display: flex;
        flex-direction: column;
        gap: 20px;
        max-width: 350px;
    }

    button.btn-primary,
    button.btn-danger {
        margin-top: 10px;
        margin-left: 20px;
        width: 120px;
    }
    
</style>

<h1>Edit Profile</h1>
<div class="container">
    <div class="buttons-column">
        <button class="nav-button"><img src="images/icons/User.png" class="icon1">Profile</button>
        <button class="nav-button"><img src="images/icons/Key.png" class="icon2">Password</button>
        <button class="nav-button"><img src="images/icons/Bell.png" class="icon3">Notifications</button>
    </div>

    <div class="form-column">
        @if (businessProfile != null)
        {
            <EditForm Model="businessProfile" OnValidSubmit="UpdateProfile">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    <label for="businessName">Business Name</label>
                    <InputText id="businessName" @bind-Value="businessProfile.BusinessName" class="form-control" />
                </div>
                <div>
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="businessProfile.Email" type="email" class="form-control" />
                </div>
                <div>
                    <label for="phoneNumber">Phone Number</label>
                    <InputText id="phoneNumber" @bind-Value="businessProfile.PhoneNumber" type="tel" class="form-control" />
                </div>
                <div>
                    <label for="image">Business Image</label>
                    <InputFile id="image" OnChange="UploadImage" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Update</button>
            </EditForm>
        }
        else
        {
            <p>Loading business profile...</p>
        }
    </div>
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">@successMessage</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private BusinessProfileDto businessProfile = new();
    private string successMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadBusinessProfile();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task<string> GetAccessTokenAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var token = user.Claims.FirstOrDefault(c => c.Type == "authToken")?.Value;
            if (!string.IsNullOrEmpty(token))
            {
                return token;
            }
        }

        throw new InvalidOperationException("User is not authenticated or token is missing.");
    }


    private async Task LoadBusinessProfile()
    {
        using var httpClient = new HttpClient();
        var apiUrl = "http://localhost:5282/business/67505cd92b42f353d3a52f7f";

        try
        {
            var token = await GetAccessTokenAsync();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.GetAsync(apiUrl);
            var content = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                errorMessage = $"Failed to load profile. Status Code: {response.StatusCode}. Response: {content}";
                return;
            }

            businessProfile = JsonSerializer.Deserialize<BusinessProfileDto>(content, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            }) ?? new BusinessProfileDto();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading profile: {ex.Message}";
        }
    }


    private async Task UpdateProfile()
    {
        try
        {//add logic
            successMessage = "Business profile updated successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating profile: {ex.Message}";
        }
    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        businessProfile.Image = memoryStream.ToArray();
    }
}
