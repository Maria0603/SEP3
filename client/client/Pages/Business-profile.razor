@page "/profile"
@using client.DTO
@inject NavigationManager NavigationManager
@inject AuthStateProvider AuthStateProvider

<style>
   
    .container {
        display: flex;
        justify-content: center; 
        align-items: center; 
       margin-top: 50px;
        margin-right: 450px;
      
    }

   
    .buttons-column {
        display: flex;
        flex-direction: column; 
        gap: 20px; 
        align-items: flex-start; 
        margin-bottom: 149px;
        margin-right:100px;
    }

    .nav-button {
        padding: 10px 20px;
        width: 150px; 
        text-align: center;
        cursor: pointer;
        border: 1px solid lightgray;
        box-shadow: 2px 2px 0 0 white, 4px 4px 0 0 lightgray;
        transition-duration: 0.2s;
        background-color: #f9f9f9;
    }

    .nav-button:hover {
        box-shadow: 3px 3px 0 0 white, 6px 6px 0 0 #d11049;
        transform: translate(-2px, -2px);
    }
    .nav-button:active {
        color: #d11049; 
        color: white;
        border-color: lightgray; 
    }

    
    .form-column {
        padding: 20px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 8px;
        display: flex;
        flex-direction: column; 
        gap: 20px; 
        max-width: 350px;
        
    }

    button.btn-primary, button.btn-danger {
        margin-top: 10px;
        margin-left: 20px;
        width: 120px; 
    }
    
    
</style>

<h1>Edit Profile (Business)</h1>
<div class="container">
    <div class="buttons-column">
        <button class="nav-button">Profile</button>
        <button class="nav-button">Password</button>
        <button class="nav-button">Notifications</button>
    </div>

    <!-- Form Column -->
    <div class="form-column">
        <EditForm Model="businessProfile" OnValidSubmit="UpdateProfile">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label for="businessName">Business Name</label>
                <InputText id="businessName" @bind-Value="businessProfile.BusinessName" class="form-control" />
            </div>
            <div>
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="businessProfile.Email" type="email" class="form-control" />
            </div>
            <div>
                <label for="phoneNumber">Phone Number</label>
                <InputText id="phoneNumber" @bind-Value="businessProfile.PhoneNumber" type="tel" class="form-control" />
            </div>
            <div>
                <label for="image">Business Image</label>
                <InputFile id="image" OnChange="UploadImage" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Update</button>
            <button @onclick="Logout" class="btn btn-danger">Log Out</button>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">@successMessage</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private BusinessProfileDto businessProfile = new();
    private string successMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        
        businessProfile = await GetBusinessProfileAsync();
    }

    private async Task UpdateProfile()
    {
        try
        {
            await SaveBusinessProfileAsync(businessProfile);
            successMessage = "Profile updated successfully.";
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred: " + ex.Message;
        }
    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        businessProfile.Image = memoryStream.ToArray();
    }

    private async Task Logout()
    {
        await AuthStateProvider.LogoutAsync();
        NavigationManager.NavigateTo("/login", true);
    }

   
    private Task<BusinessProfileDto> GetBusinessProfileAsync()
    {
       
        return Task.FromResult(new BusinessProfileDto
        {
            BusinessName = "Example Business",
            Email = "example@business.com",
            PhoneNumber = "+1234567890",
            Image = null
        });
    }

    private Task SaveBusinessProfileAsync(BusinessProfileDto profile)
    {
        // Simulate saving the profile
        return Task.CompletedTask;
    }
}
