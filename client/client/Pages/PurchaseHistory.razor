@page "/purchaseHistory"
@using BlazorBootstrap
@using client.DTO.Purchase
@using Microsoft.AspNetCore.Authorization
@inject IPurchaseService purchaseService
@inject IOfferService offerService


@attribute [Authorize]
<PageTitle>PurchaseHistory</PageTitle>

<h3>Your Purchases</h3>

<Grid
    TItem="PurchaseItem"
    Class="table table-hover table-striped align-middle"
    AllowSorting="true"
    DataProvider="PurchasesProvider"
    Responsive="true">

    <GridColumns>
        <GridColumn TItem="PurchaseItem" HeaderText="Id" PropertyName="Id" SortKeySelector="item => item.Id">
            <a href="@($"/offers/{context.Id}")">@context.Id</a>
        </GridColumn>
        <GridColumn TItem="PurchaseItem" HeaderText="Title" PropertyName="Title" SortKeySelector="item => item.Title">
            @context.Title
        </GridColumn>
        <GridColumn TItem="PurchaseItem" HeaderText="Amount" PropertyName="Amount" SortKeySelector="item => item.Amount">
            @context.Amount
        </GridColumn>
        <GridColumn TItem="PurchaseItem" HeaderText="Date" PropertyName="Date" SortKeySelector="item => item.Date">
            @context.Date
        </GridColumn>
        <GridColumn TItem="PurchaseItem" HeaderText="Price" PropertyName="Price" SortKeySelector="item => item.Price">
            @context.Price
        </GridColumn>
    </GridColumns>

</Grid>

@code {

    private async Task<GridDataProviderResult<PurchaseItem>> PurchasesProvider(GridDataProviderRequest<PurchaseItem> request) {
        var purchases = await purchaseService.GetPurchasesAsync();
        var purchaseItems = new List<PurchaseItem>();

        foreach (var purchase in purchases) {
            var offer = await offerService.GetOfferByIdAsync(purchase.OfferId);
            if (offer != null) {
                purchaseItems.Add(new PurchaseItem {
                    //Id = purchase.PurchaseId,
                    Id = offer.Id,
                    Title = offer.Title,
                    Amount = purchase.NumberOfItems,
                    Date = purchase.purchaseTime,
                    Price = purchase.PricePerItem
                });
            }
        }

        return await Task.FromResult(request.ApplyTo(purchaseItems));
    }

    protected class PurchaseItem {
        public string Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public int Amount { get; set; }
        public DateTime Date { get; set; }
        public int Price { get; set; }
    }

}