@page "/"
@using client.DTO
@using client.DTO.Offer
@using client.Models
@using client.Pages.Components
@using Microsoft.AspNetCore.Authorization
@inject client.Services.IOfferService OfferService
@attribute [Authorize]
<PageTitle>Home</PageTitle>


<div class="search-bar-container">
    <SearchBarComponent OnFilterApply="OnFilterApply" OnFilterClear="OnFilterClear"/>
</div>

<div class="container">
    @if (offers == null)
    {
        <p>Loading offers...</p>
    }
    else if (offers.Count == 0)
    {
        <p>No offers available at the moment.</p>
    }
    else
    {
        @foreach (OfferResponseDto offer in offers)
        {
            <OfferComponent OfferData="offer"></OfferComponent>
        }
    }
</div>


@code {
    private List<OfferResponseDto>? offers;


    protected override async Task OnInitializedAsync()
    {
        // Call the offers retrieval method
        await RetrieveOffersAsync(null);
    }

    private async Task RetrieveOffersAsync(FilterRequestDto? filterRequestDto)
    {
        try
        {
            // Call the service to get the offers
            offers = await OfferService.GetOffersAsync(filterRequestDto);

            if (offers != null && offers.Any())
            {
                foreach (var offer in offers)
                {
                    Console.WriteLine($"Offer ID: {offer.Id}, Name: {offer.Title}, Price: {offer.OfferPrice}: [{offer.ImagePath}]");
                }
            }
            else
            {
                Console.WriteLine("Offers are empty");
            }
        }
        catch (Exception ex)
        {
            // Handle errors (e.g., log or display an error message)
            Console.WriteLine($"Error fetching offers: {ex.Message}");
            offers = new List<OfferResponseDto>(); // Ensure the UI does not break
        }
    }

    public async Task OnFilterApply(FilterRequestDto filterRequestDto)
    {
        // Trigger offer retrieval logic with updated filter criteria
        await RetrieveOffersAsync(filterRequestDto);
    }

    public async Task OnFilterClear()
    {
        // Get offers without filters
        await RetrieveOffersAsync(null);
    }


}