@page "/"
@using client.DTO
@using client.Models
@using client.Pages.Components
@inject client.Services.IOfferService OfferService
<PageTitle>Home</PageTitle>

<h2> The main page</h2>

<div class="container">
    <SearchBarComponent/>
    @if (offers == null) {
        <p>Loading offers...</p>
    }
    else if (offers.Count == 0) {
        <p>No offers available at the moment.</p>
    }
    else {
        @foreach (ShortOfferResponseDto offer in offers) {
            <OfferComponent OfferData="offer"></OfferComponent>
        }
    }
</div>


@code {
    private List<ShortOfferResponseDto>? offers;

    protected override async Task OnInitializedAsync() {
        // Call the service to get the offers
        try {
            offers = await OfferService.GetOffersAsync();
            if (offers != null) {
                foreach (var offer in offers) {
                    Console.WriteLine($"Offer ID: {offer.Id}, Name: {offer.Title}, Price: {offer.OfferPrice}: [{offer.ImagePath}]");
                }
            }
            else {
                Console.WriteLine("Offers are empty");
            }
        }
        catch (Exception ex) {
            // Handle errors (e.g., log or display an error message)
            Console.WriteLine($"Error fetching offers: {ex.Message}");
            offers = new List<ShortOfferResponseDto>(); // Ensure the UI does not break
        }
    }

}