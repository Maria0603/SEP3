@page "/offers/{id}"

@using client.DTO
@using client.DTO.Offer
@using client.DTO.Order
@using client.Models
@using client.Services
@using Microsoft.AspNetCore.Authorization
@inherits Microsoft.AspNetCore.Components.LayoutComponentBase
@inject IOrderService OrderService
@inject IOfferService OfferService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

@attribute [Authorize]

@if (_offer is not null)
{
<div class="container">
    <div>
        <img src="@(HttpClient.BaseAddress + _offer.ImagePath)" alt="Offer Image" class="offer-image"/>
        <img src="images/brand_logo.jpeg" alt="Logo" class="logo-image"/>
        <header class="BusinessName">BUSINESS NAME HERE</header>
        <div class="offer__top--left @( _offer.NumberOfAvailableItems > 0 ? "" : "sold-out" )">
            @( _offer.NumberOfAvailableItems > 0
            ? $"{_offer.NumberOfAvailableItems} Left"
            : "Sold Out" )
        </div>
    </div>

    <div class="float-container">
        <!-- Left -->
        <div><h2>@_offer.Title</h2>
            <div class="float-child">
                <div class="row">
                    <img src="images/icons/bag.png" alt="Bag icon" class="icon"/>
                    <p>@string.Join(", ", _offer.Categories)</p>
                </div>
                <div class="row">
                    <img src="images/icons/star.png" alt="Star icon" class="icon"/>
                    <p>STARS HERE</p>
                </div>
                <div class="row">
                    <img src="images/icons/clock.png" alt="Clock icon" class="icon"/>
                    <p>Collect @_offer.PickupTimeStart.Day/@_offer.PickupTimeStart.Month/@_offer.PickupTimeStart.Year from @_offer.PickupTimeStart.Hour:@_offer.PickupTimeStart.Minute to @_offer.PickupTimeEnd.Hour:@_offer.PickupTimeEnd.Minute</p>
                </div>
            </div>
        </div>

        <!-- Right -->
        <div class="float-child2">
            <div class="crossed-row">
                <p><strong>Old Price:</strong> @_offer.OriginalPrice dkk</p>
            </div>
            <div class="row">
                <p><strong>New Price:</strong> @_offer.OfferPrice dkk</p>
            </div>
            <div class="row">
                <div class="amount-reserve-container">
                    <label for="amount">
                        <strong>Amount:</strong>
                    </label>

                    <div id="amount">
                        <button @onclick="DecreaseQuantity">-</button>
                        <span>@amount</span>
                        <button @onclick="IncreaseQuantity">+</button>
                    </div>
                    <button @onclick="SubmitPurchase" class="reserve-button">Reserve</button>
                </div>
            </div>
        </div>
    </div>

    <div class="location">
        <div class="location-content">
            <div class="location-row">
                <img src="images/icons/location.png" alt="location-icon" class="location-icon"/>
                <p class="location-text">Vejlevej 54, 8700, Horsens, 5km</p>
            </div>
        </div>
    </div>

    <div class="description">
        <h5>Description</h5>
        <p>@_offer.Description</p>
    </div>
</div>
}
else
{
<p>Loading offer...</p>
}

@code {
    [Parameter] public string id { get; set; }
    private int amount = 1;

    private OfferResponseDto? _offer;

    protected override async Task OnInitializedAsync()
    {
        _offer = await OfferService.GetOfferByIdAsync(id);
    }

    private void IncreaseQuantity()
    {
        if (amount < _offer.NumberOfAvailableItems)
            amount++;
    }

    private void DecreaseQuantity()
    {
        if (amount > 1)
            amount--;
    }

    private async Task SubmitPurchase()
    {
        var request = new OrderRequestDto
        {
            OfferId = id,
            NumberOfItems = amount,
            UserId = "123abc"
        };

        try
        {
            var response = await OrderService.PlaceOrderAsync(request);
            string sessionUrl = response.Url;
            NavigationManager.NavigateTo(sessionUrl);
        }
        catch (Exception e)
        {
// Handle errors (e.g., display a message to the user)
        }
    }

}

