@page "/offer"
@using System.Net
@using client.DTO
@using client.DTO.Offer
@using client.Services
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject IOfferService OfferService;
@inject HttpClient HttpClient;
@inject NavigationManager NavigationManager
@inject IWebAssemblyHostEnvironment Environment;

@if (createdOffer is null) {
    <EditForm Model="offerDto" OnValidSubmit="SubmitOffer">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="mb-3">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="offerDto.Title" class="form-control"/>
        </div>

        <div class="mb-3">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="offerDto.Description" class="form-control"/>
        </div>

        <div class="row">
            <div class="mb-3 col-sm-2">
                <label for="originalPrice">Original Price (kr)</label>
                <InputNumber id="originalPrice" @bind-Value="offerDto.OriginalPrice" class="form-control"/>
            </div>

            <div class="mb-3 col-sm-2">
                <label for="offerPrice">Offer Price (kr)</label>
                <InputNumber id="offerPrice" @bind-Value="offerDto.OfferPrice" class="form-control"/>
            </div>
        </div>

        <div class="row">
            <div class="mb-3 col-sm-2">
                <label for="numberOfItems">Number of Items</label>
                <InputNumber id="numberOfItems" @bind-Value="offerDto.NumberOfItems" class="form-control"/>
            </div>
        </div>

        <div class="row">
            <div class="mb-3 col-sm-2">
                <label for="pickupDate">Pickup Date</label>
                <InputDate id="pickupDate" @bind-Value="dateValue" class="form-control"/>
            </div>
        </div>

        <div class="row">
            <div class="mb-3 col-sm-2">
                <label for="pickupTimeStart">Pickup Start Time</label>
                <input type="time" id="pickupTimeStart" @bind="timeStart" class="form-control"/>
            </div>

            <div class="mb-3 col-sm-2">
                <label for="pickupTimeEnd">Pickup End Time</label>
                <input type="time" id="pickupTimeEnd" @bind="timeEnd" class="form-control"/>
            </div>
        </div>

        <!-- Categories Picker -->
        <div class="mb-3">
            <label for="categories">Categories</label>
            <div class="d-flex align-items-center">
                <select id="categories" @bind="selectedCategory" class="form-control category-dropdown">
                    @foreach (var category in availableCategories) {
                        <option value="@category">@category</option>
                    }
                </select>
                <button type="button" @onclick="AddCategory" class="btn btn-secondary ms-2">Add</button>
            </div>

            <div class="selected-categories mt-2">
                @foreach (var category in offerDto.Categories) {
                    <div class="category-box">
                        <span class="category-text">@category</span>
                        <button type="button" @onclick="() => RemoveCategory(category)" class="btn btn-danger btn-sm">X</button>
                    </div>
                }
            </div>
        </div>

        <div class="mb-3">
            <label for="image">Image</label>
            <InputFile id="image" OnChange="HandleImageUpload" class="form-control"/>
        </div>

        @if (!string.IsNullOrEmpty(errorLabel)) {
            <div class="alert alert-danger mt-3">@errorLabel</div>
        }
        @if (!string.IsNullOrEmpty(successLabel)) {
            <div class="alert alert-success mt-3">@successLabel</div>
        }

        <button type="submit" class="btn btn-danger mt-3">Submit</button>
    </EditForm>
}

else {NavigationManager.NavigateTo($"/offers/{createdOffer.Id}"); }


@code {
    private CreateOfferRequestDto offerDto = new() {
        Categories = new List<string>(),
        PickupTimeStart = new DateTime(),
        PickupTimeEnd = new DateTime(),
        NumberOfItems = 1 //Default
    };
    
    protected override void OnInitialized()
    {
        if (availableCategories.Any())
        {
            selectedCategory = availableCategories.First().Name;
        }

        // Pre-fill data for development environment
        if (Environment.Environment == "Development")
        {
            PrefillTestData();
        }
    }

    private void PrefillTestData()
    {
        //used random time/date for more realistic offers view
        
        Random random = new Random();
        
        int randomDays = random.Next(1, 4); 
        dateValue = DateTime.Now.AddDays(randomDays);

       
        int startHour = random.Next(8, 12); 
        int startMinute = random.Next(0, 60); 
        timeStart = new TimeOnly(startHour, startMinute);

        
        int endHour = random.Next(13, 20); 
        int endMinute = random.Next(0, 60); 
        timeEnd = new TimeOnly(endHour, endMinute);
        
        offerDto.Title = "Bread and buns";
        offerDto.Description = "This is bread description";
        offerDto.OriginalPrice = 100;
        offerDto.OfferPrice = 30;
        offerDto.NumberOfItems = 5;
        offerDto.Categories.Add("Bread");
        offerDto.Categories.Add("Vegan");
    }



    private List<CategoryPickerComponent.Category> availableCategories = new List<CategoryPickerComponent.Category> {
        new CategoryPickerComponent.Category() { Name = "Bread" },
        new CategoryPickerComponent.Category { Name = "Vegan" },
        new CategoryPickerComponent.Category { Name = "Pastry" },
        new CategoryPickerComponent.Category { Name = "Dairy" }
    };

    // private readonly List<string> availableCategories = new() { "Bread", "Vegan", "Pastry", "Dairy" };
    private string selectedCategory;
    private DateTime? dateValue = DateTime.Now.Date;
    private TimeOnly? timeStart;
    private TimeOnly? timeEnd;
    private string errorLabel = "";
    private string successLabel = "";
    private OfferResponseDto? createdOffer = null;
    

    private void AddCategory() {
        if (!string.IsNullOrEmpty(selectedCategory) &&
            !offerDto.Categories.Contains(selectedCategory)) {
            offerDto.Categories.Add(selectedCategory);
        }
    }

    private void RemoveCategory(string category) {
        offerDto.Categories.Remove(category);
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e) {
        errorLabel = "";
        successLabel = "";
        var file = e.File;
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        offerDto.Image = memoryStream.ToArray();
    }

    private async Task SubmitOffer()
    {
        errorLabel = "";
        successLabel = "";

        // Validate Pickup Date
        if (dateValue is not null)
        {
            offerDto.PickupTimeEnd = dateValue.Value;
            offerDto.PickupTimeStart = dateValue.Value;
        }
        else
        {
            errorLabel = "Please provide pickup date.";
            return;
        }

        // Validate Pickup Start Time
        if (timeStart is not null)
        {
            offerDto.PickupTimeStart = new DateTime(
                dateValue.Value.Year,
                dateValue.Value.Month,
                dateValue.Value.Day,
                timeStart.Value.Hour,
                timeStart.Value.Minute,
                0); // Combine date and time
        }
        else
        {
            errorLabel = "Please provide pickup time start.";
            return;
        }

        // Validate Pickup End Time
        if (timeEnd is not null)
        {
            offerDto.PickupTimeEnd = new DateTime(
                dateValue.Value.Year,
                dateValue.Value.Month,
                dateValue.Value.Day,
                timeEnd.Value.Hour,
                timeEnd.Value.Minute,
                0); // Combine date and time
        }
        else
        {
            errorLabel = "Please provide pickup time end.";
            return;
        }

        try
        {
            // Save Offer
            createdOffer = await OfferService.SaveOfferAsync(offerDto);

            if (createdOffer is not null)
            {
                Console.WriteLine("Offer created successfully!");
                successLabel = $"Offer created successfully: {createdOffer.Id}";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error: {e.Message}");
            errorLabel = e.Message;
        }
    }


    private void ResetForm() {
        createdOffer = null;
        offerDto = new CreateOfferRequestDto {
            Categories = new List<string>(),
            PickupTimeStart = new DateTime(),
            PickupTimeEnd = new DateTime(),
            NumberOfItems = 1
        };
        selectedCategory = string.Empty;
        timeStart = null;
        timeEnd = null;
        dateValue = null;
        errorLabel = "";
        successLabel = "";
    }
}
