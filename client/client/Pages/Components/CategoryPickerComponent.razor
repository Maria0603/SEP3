@using client.DTO.Offer
@inject IOfferService OfferService;

<div class="mb-3">
    <label for="categories">Categories</label>
    <div class="d-flex align-items-center">
        <select id="categories" @bind="SelectedCategory" class="form-control category-dropdown">
            @foreach (var category in AvailableCategories)
            {
                <option value="@category.Name">@category.Name</option>
            }
        </select>
        <button type="button" @onclick="AddCategory" class="btn btn-secondary ms-2">Add</button>
    </div>

    <div class="selected-categories mt-2">
        @foreach (var category in SelectedCategories)
        {
            <div class="category-box">
                <span class="category-text">@category.Name</span>
                <button type="button" @onclick="() => RemoveCategory(category)" class="btn btn-danger btn-sm">X</button>
            </div>
        }
    </div>
</div>

@code {

    private List<CategoryDto> AvailableCategories { get; set; } = new();

    private string SelectedCategory { get; set; }

    [Parameter] public List<CategoryDto> SelectedCategories { get; set; } = new();

    [Parameter] public EventCallback<List<CategoryDto>> SelectedCategoriesChanged { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        try
        {
            // Fetch categories from the API
            AvailableCategories = await OfferService.GetCategoriesAsync();

            // Set default selected category if needed
            if (AvailableCategories.Any())
            {
                SelectedCategory = AvailableCategories.First().Name;
            }
        }
        catch (Exception ex)
        {
            // Handle errors (e.g., log them or show a message)
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private void AddCategory()
    {
        if (!string.IsNullOrEmpty(SelectedCategory))
        {
            var category = AvailableCategories.FirstOrDefault(c => c.Name == SelectedCategory);
            if (category != null && !SelectedCategories.Contains(category))
            {
                SelectedCategories.Add(category);
                SelectedCategoriesChanged.InvokeAsync(SelectedCategories);
            }
        }
    }

    private void RemoveCategory(CategoryDto category)
    {
        SelectedCategories.Remove(category);
        SelectedCategoriesChanged.InvokeAsync(SelectedCategories);
    }

    public class Category
    {
        public string Name { get; set; }
    }

}