@using client.DTO
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor

<div class="search-bar-container">
    <div class="map-icon">
        <i class="bi bi-geo-alt"></i>
    </div>
    <div class="search-bar">
        <input class="search-input" placeholder="Search..." />
        <div class="search-icon">
            <i class="bi bi-search"></i>
        </div>
    </div>
    <div class="filter-icon-bubble" @onclick="ToggleFilters">
        <i class="bi bi-sliders"></i>
    </div>
</div>

@if (showFilterPopup)
{
    <div class="popup-overlay">
        <div class="popup-window">
            <div class="popup-header">
                <h3>Filters</h3>
                <button class="close-button" @onclick="ToggleFilters">&times;</button>
            </div>
            <div class="popup-body">
                <!-- Category Picker for Filters -->
                <CategoryPickerComponent @bind-selectedCategories="selectedCategories" />

                <!-- Collection Time Filter -->
                <div class="filter-section">
                    <label>Collection Time</label>
                    <SfSlider TValue="int[]" @bind-Value="timeRange" Type="SliderType.Range" Min="0" Max="24" Step="1" />
                    <p>From: @timeRange[0]:00 To: @timeRange[1]:00</p>
                </div>

                <!-- Price Range Filter -->
                <div class="filter-section">
                    <label>Price Range</label>
                    <SfSlider TValue="int[]" @bind-Value="priceRange" Type="SliderType.Range" Min="0" Max="500" Step="1" />
                    <p>From: @priceRange[0] To: @priceRange[1]</p>
                </div>
            </div>
            <div class="popup-footer">
                <button class="clear-button" @onclick="ClearFilters">Clear Filters</button>
                <button class="apply-button" @onclick="ApplyFilters">Apply</button>
            </div>
        </div>
    </div>
}

<div @attributes="AdditionalAttributes" class="offer" @onclick="()=>ShowOfferDetails(OfferDto.Id)">
    <div class="offer__top">
        <div class="offer__top--left">@OfferDto.NumberOfAvailableItems Left</div>
        <svg class="offer__top--favourite @(false ? "offer__top--favourite__active" : "")" width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M5 13.1371C5 18 9.01943 20.5914 11.9617 22.9109C13 23.7294 14 24.5 15 24.5C16 24.5 17 23.7294 18.0383 22.9109C20.9806 20.5914 25 18 25 13.1371C25 8.27416 19.4998 4.82546 15 9.50063C10.5002 4.82546 5 8.27416 5 13.1371Z" fill="currentColor" />
        </svg>

        <div class="offer__top--business">
            <div class="offer__top--business__icon">
                <img src="https://cdn-icons-png.flaticon.com/512/1170/1170627.png" alt="Business Icon" />
            </div>
            <h3 class="offer__top--business__name">Business Name: @OfferDto.Title</h3>
        </div>
    </div>

    <div class="offer__img">
        <img src="@(HttpClient.BaseAddress + OfferDto.ImagePath)" alt="Offer Image" />
    </div>

    <div class="offer__bottom">
        <h3 class="offer__bottom--name">@OfferDto.Title</h3>
        <div class="offer__bottom--pickup">
            Collect on <em>@OfferDto.PickupDate</em>
            from <em>@OfferDto.PickupTimeStart/@OfferDto.PickupTimeEnd</em>
        </div>
        <div class="offer__bottom--stats">
            <div class="offer__bottom--stats__rating">
                <p class="offer__bottom--stats__rating--text">3.5</p>
            </div>
            <div class="offer__bottom--stats__distance">10 km</div>
            <div class="offer__bottom--stats__price">@OfferDto.OfferPrice.ToString("0.00") kr</div>
        </div>
    </div>
</div>

@code {
   
    [Parameter]
    public ShortOfferResponseDto OfferDto { get; set; }

    // Filters
    private bool showFilterPopup = false;
    private int[] priceRange = { 10, 100 };
    private int[] timeRange = { 6, 16 };

    private List<CategoryPickerComponent.Category>? selectedCategories;
    
    private FilterRequestDto? filterRequestDto;
    
    public Dictionary<string, object> AdditionalAttributes { get; set; }
    
    private void ShowOfferDetails(string offerId)
    {
        NavigationManager.NavigateTo($"offers/{OfferDto.Id}");
    }
    
    private void ToggleFilters()
    {
        showFilterPopup = !showFilterPopup;
    }
    
    private void ApplyFilters()
    {
        showFilterPopup = false;
        Console.WriteLine($"Filters Applied - Price Range: {priceRange[0]} to {priceRange[1]}, Time Range: {timeRange[0]}:00 to {timeRange[1]}:00");

        filterRequestDto = new FilterRequestDto
        {
            Categories = selectedCategories?.Select(c => c.Name).ToList(),
            MinOfferPrice = priceRange[0],
            MaxOfferPrice = priceRange[1],
            PickupTimeStart = new TimeDto { Hour = timeRange[0], Minute = 0 },
            PickupTimeEnd = new TimeDto { Hour = timeRange[1], Minute = 0 }
        };
    }
    
    private void ClearFilters()
    {
        priceRange = new int[] { 0, 500 };
        timeRange = new int[] { 0, 24 };
        Console.WriteLine("Filters Cleared");
    }
}
