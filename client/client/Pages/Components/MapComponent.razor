@using client.DTO.Customer
@using client.DTO
@using client.DTO.Business
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject ILocationService LocationService
@inject client.Services.IBusinessService BusinessService
@inject HttpClient HttpClient

<div class="popup-overlay">
    <div class="popup-window">
        <div class="popup-header">
            <h3>Maps</h3>
            <button class="close-button" @onclick="ToggleMap">&times;</button>
        </div>
        <div class="popup-body">
            <div id="mapContainer">
                @* <LeafletMap Map="_map" /> *@
            </div>
            <div class="map-controls">
                <label>Circle Radius (km):</label>
                <input type="range" min="1" max="100" step="1" @bind="circleRadius" @bind:after="UpdateCircleRadius"/>
                <span>@circleRadius kilometers</span>
            </div>
            <button @onclick="ShowMapInfo" class="btn btn-danger mt-3">Search</button>
            @if (!string.IsNullOrEmpty(mapInfo))
            {
                <div class="map-info mt-3">
                    <p><strong>Map Center:</strong> Latitude: @mapCenterLatitude, Longitude: @mapCenterLongitude</p>
                    <p><strong>Circle Radius:</strong> @circleRadius kilometers</p>
                </div>
            }
        </div>

    </div>
</div>


@code {
    private int circleRadius = 10; // Radius in km
    private IJSObjectReference? module;
    private string? result;
    private string? mapInfo;
    private double mapCenterLatitude = 56.156486066837665;
    private double mapCenterLongitude = 10.19591121665965;
    
    //private double mapRadius;

    private CustomerLocationRequestResponseDto? customerLocation;
    
    [Parameter] public FilterRequestDto? FilterRequestDto { get; set; }
    [Parameter] public EventCallback OnFilterApply { get; set; }
    [Parameter] public EventCallback ToggleMap { get; set; }

    private async Task UpdateCircleRadius()
    {
        if (module != null)
        {
            await module.InvokeVoidAsync("update_circle_radius", circleRadius);
        }
    }

    private async Task ShowMapInfo()
    {
        if (module != null)
        {
            var resultMap = await module.InvokeAsync<MapCenterAndRadius>("get_map_center_and_radius");
            Console.WriteLine(resultMap);
            // mapCenterLatitude = resultMap.Latitude;
            // mapCenterLongitude = resultMap.Longitude;
            // circleRadius = (int)resultMap.Radius;

            FilterRequestDto.Location = new LocationDto
            {
                Latitude = resultMap.Latitude,
                Longitude = resultMap.Longitude,
                Radius = resultMap.Radius
                    
            }; 
            
            mapInfo = $"Center: Latitude {mapCenterLatitude}, Longitude {mapCenterLongitude}. Radius: {circleRadius} km.";
            await OnFilterApply.InvokeAsync();
            await ToggleMap.InvokeAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/leafletmap.js");
            try
            {
                await InitializeMap(mapCenterLatitude, mapCenterLongitude, circleRadius);
                await LoadBusinessesOnMap();
            }
            catch (Exception e)
            {
                Console.WriteLine($"Error fetching location: {e.Message}");
            }
        }
    }
    
    
    private async Task InitializeMap(double latitude, double longitude, int radius)
    {
        if (module != null)
        {
            if (latitude != 0 && longitude != 0 && radius != 0) // the customer may not have a location set
                await module.InvokeVoidAsync("load_map", latitude, longitude, radius);
            else await module.InvokeVoidAsync("load_map");

            
        }
    }
    
    private async Task LoadBusinessesOnMap()
    {
        try
        {
            var businesses = await BusinessService.GetBusinessesAsync();
            if (module != null && businesses != null)
            {
                var jsBusinesses = businesses
                    .Where(b => b.Latitude != null && b.Longitude != null)
                    .Select(b => new
                    {
                        name = b.BusinessName,
                        latitude = b.Latitude,
                        longitude = b.Longitude,
                        imageUrl = HttpClient.BaseAddress +"images/"+b.Logo_path
                    });

                await module.InvokeVoidAsync("insertBusinesses", jsBusinesses);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading businesses: {ex.Message}");
        }
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module != null)
        {
            // await module.InvokeVoidAsync("dispose");
            await module.InvokeVoidAsync("cleanup_map");
            await module.DisposeAsync();
        }
    }
    
}