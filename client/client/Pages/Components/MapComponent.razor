@using client.Dto.Customer
@using client.Dto
@using client.Dto.Business
@inject IJSRuntime JSRuntime
@inject ILocationService LocationService
@inject client.Services.IBusinessService BusinessService
@inject HttpClient HttpClient

<div class="popup-overlay">
    <div class="popup-window">
        <div class="popup-header">
            <h3>Maps</h3>
            <button class="close-button" @onclick="ToggleMap">&times;</button>
        </div>
        <div class="popup-body">
            <div id="mapContainer">
                @* <LeafletMap Map="_map" /> *@
            </div>
            <div class="map-controls">
                <label>Circle Radius (km):</label>
                <input type="range" min="1" max="100" step="1" @bind="@FilterRequestDto.Location.Radius" @bind:after="UpdateCircleRadius"/>
                <span>@FilterRequestDto.Location.Radius kilometers</span>
            </div>
            <button @onclick="ShowMapInfo" class="btn btn-danger mt-3">Search</button>
            @if (!string.IsNullOrEmpty(mapInfo))
            {
                <div class="map-info mt-3">
                    <p><strong>Map Center:</strong> Latitude: @FilterRequestDto.Location.Latitude, Longitude: @FilterRequestDto.Location.Longitude</p>
                    <p><strong>Circle Radius:</strong> @@FilterRequestDto.Location.Radius kilometers</p>
                </div>
            }
        </div>

    </div>
</div>


@code {
    // private int circleRadius = 10; // Radius in km

    private string? result;
    private string? mapInfo;

    //private double mapRadius;

    private CustomerLocationRequestResponseDto? customerLocation;
    [Parameter] public IJSObjectReference? Module { get; set; }
    [Parameter] public FilterRequestDto FilterRequestDto { get; set; }
    [Parameter] public EventCallback OnFilterApply { get; set; }
    [Parameter] public EventCallback ToggleMap { get; set; }

    private async Task UpdateCircleRadius()
    {
        if (Module != null)
        {
            await Module.InvokeVoidAsync("update_circle_radius", FilterRequestDto.Location.Radius);
        }
    }


    private async Task ShowMapInfo()
    {
        if (Module != null)
        {
            var resultMap = await Module.InvokeAsync<MapCenterAndRadius>("get_map_center_and_radius");
            Console.WriteLine(resultMap);
            // mapCenterLatitude = resultMap.Latitude;
            // mapCenterLongitude = resultMap.Longitude;
            // circleRadius = (int)resultMap.Radius;

            FilterRequestDto.Location = new LocationDto
            {
                Latitude = resultMap.Latitude,
                Longitude = resultMap.Longitude,
                Radius = resultMap.Radius
            };

            await OnFilterApply.InvokeAsync();
            await ToggleMap.InvokeAsync();
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            FilterRequestDto.Location ??= new LocationDto()
                {
                    Latitude = 56.156486066837665,
                    Longitude = 10.19591121665965,
                    Radius = 10
                };
            
            await InitializeMap(FilterRequestDto.Location.Latitude, FilterRequestDto.Location.Longitude, FilterRequestDto.Location.Radius);
            await LoadBusinessesOnMap();
        }
    }


    private async Task InitializeMap(double latitude = 56.156486066837665, double longitude = 10.19591121665965, double radius = 10)
    {
        if (Module != null)
        {
            await Module.InvokeVoidAsync("load_map", latitude, longitude, radius);
        }
    }


    private async Task LoadBusinessesOnMap()
    {
        try
        {
            var businesses = await BusinessService.GetBusinessesAsync();
            if (Module != null && businesses != null)
            {
                var jsBusinesses = businesses
                    .Where(b => b.Latitude != null && b.Longitude != null)
                    .Select(b => new
                    {
                        name = b.BusinessName,
                        latitude = b.Latitude,
                        longitude = b.Longitude,
                        imageUrl = HttpClient.BaseAddress + "images/" + b.Logo_path
                    });

                await Module.InvokeVoidAsync("insertBusinesses", jsBusinesses);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading businesses: {ex.Message}");
        }
    }

   

}