@using client.Dto
@using client.Dto.Offer
@using Syncfusion.Blazor.Inputs

<div class="popup-overlay">
    <div class="popup-window">
        <div class="popup-header">
            <h3>Filters</h3>
            <button class="close-button" @onclick="ToggleFilters">&times;</button>
        </div>
        <div class="popup-body">
            <CategoryPickerComponent SelectedCategories="selectedCategories" SelectedCategoriesChanged="OnSelectedCategoriesChanged"/>
            <div class="filter-section">
                <label>Collection Date</label>
                <div class="date-range">
                    <InputDate @bind-Value="pickupDateStart" class="form-control" Placeholder="Start Date"/>
                    <span class="mx-2">to</span>
                    <InputDate @bind-Value="pickupDateEnd" class="form-control" Placeholder="End Date"/>
                </div>
            </div>
            
            <div class="filter-section">
                <label>Price Range</label>
                <SfSlider TValue="int[]" @bind-Value="priceRange" Type="SliderType.Range" Min="0" Max="500" Step="1">
                </SfSlider>
                <p>From: @priceRange[0] To: @priceRange[1]</p>
            </div>
        </div>
        <div class="popup-footer">
            <button class="clear-button" @onclick="ClearFilters">Clear filters</button>
            <button class="apply-button" @onclick="ApplyFilters">Apply</button>
        </div>
    </div>
</div>


@code {
    [Parameter] public EventCallback ToggleFilters { get; set; }
    [Parameter] public EventCallback OnFilterApply { get; set; }
    [Parameter] public EventCallback OnFilterClear { get; set; }
    [Parameter] public FilterRequestDto FilterRequestDto { get; set; }

    private bool showFilterPopup = false;
    private bool showMapPopup = false;
    private int[] priceRange = { 0, 500 };
    private int[] timeRange = { 0, 24 };
    private DateTime? pickupDateStart { get; set; }= DateTime.Now;
    private DateTime? pickupDateEnd { get; set; } = DateTime.Now.AddDays(1);
    private FilterRequestDto? filterRequestDto;
    private List<CategoryDto>? selectedCategories = new();

    protected override async Task OnInitializedAsync()
    {
        pickupDateEnd = FilterRequestDto.PickupTimeEnd;
        pickupDateStart = FilterRequestDto.PickupTimeStart;
        if(FilterRequestDto.Categories != null)
        {
            selectedCategories = FilterRequestDto.Categories.Select(c => new CategoryDto { Name = c }).ToList();
        }
        if (FilterRequestDto.MinOfferPrice != null || FilterRequestDto.MaxOfferPrice != null)
        {
            priceRange = new int[] 
            { 
                FilterRequestDto.MinOfferPrice ?? 0, 
                FilterRequestDto.MaxOfferPrice ?? 500 
            };
        }
    }

    private async Task ApplyFilters()
    {
        showFilterPopup = false;
        Console.WriteLine($"Filters Applied - Price Range: {priceRange[0]} to {priceRange[1]}, Time Start: {pickupDateStart} to {pickupDateEnd}");

        FilterRequestDto.Categories = selectedCategories.Select(c => c.Name).ToList();
        FilterRequestDto.MinOfferPrice = priceRange[0];
        FilterRequestDto.MaxOfferPrice = priceRange[1];
        FilterRequestDto.PickupTimeStart = pickupDateStart;
        FilterRequestDto.PickupTimeEnd = pickupDateEnd;
        
        Console.WriteLine($"Filters Applied - Price Range: {priceRange[0]} to {priceRange[1]}, Time Start: {pickupDateStart} to {pickupDateEnd}, Categories: {selectedCategories.Select(c => c.Name).ToList()}");
        
        await OnFilterApply.InvokeAsync();
        await ToggleFilters.InvokeAsync();
    }
    
    private void OnSelectedCategoriesChanged(List<CategoryDto> categories)
    {
        // Handle updated categories
        selectedCategories = categories;
    }
    private async Task ClearFilters()
    {
        priceRange = new int[] { 0, 100 };
        timeRange = new int[] { 0, 24 };
        showFilterPopup = false;
        await OnFilterClear.InvokeAsync();
        Console.WriteLine("Filters Cleared");
    }
}