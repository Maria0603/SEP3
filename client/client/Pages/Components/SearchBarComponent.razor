@using client.Dto
<div class="search-bar">
    <input
        class="search-input"
        placeholder="Search..."
        value="@FilterRequestDto.TextSearch"
        @oninput="HandleTextSearchChange" />
    <div class="search-icon">
        <i class="bi bi-search"></i>
    </div>
</div>

@code {
    [Parameter] public FilterRequestDto FilterRequestDto { get; set; } = new FilterRequestDto();
    [Parameter] public EventCallback OnFilterApply { get; set; }

    private CancellationTokenSource? debounceCts;

    private async Task HandleTextSearchChange(ChangeEventArgs e)
    {
        // Update the TextSearch property in FilterRequestDto
        FilterRequestDto.TextSearch = e.Value?.ToString();

        // Cancel the previous debounce task
        debounceCts?.Cancel();
        debounceCts = new CancellationTokenSource();
        var token = debounceCts.Token;

        try
        {
            // Wait 300ms before triggering the API call
            await Task.Delay(300, token);

            if (!token.IsCancellationRequested && OnFilterApply.HasDelegate)
            {
                await OnFilterApply.InvokeAsync();
            }
        }
        catch (TaskCanceledException)
        {
            // Ignore task cancellations
        }
    }
}