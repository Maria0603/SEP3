@using System.Security.Claims
@using client.Pages.Shared
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @RedirectIfNotAuthorized()
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>


@code {

    private RenderFragment RedirectIfNotAuthorized() => builder =>
    {
        var authState = AuthProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;

        // Check if the user is authenticated
        if (!user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/auth/login");
        }
        else
        {
            // Check user's role and redirect accordingly
            var roleClaim = user.FindFirst(c => c.Type == ClaimTypes.Role);
            if (roleClaim != null)
            {
                var role = roleClaim.Value;
                if (role == "BUSINESS")
                {
                    Navigation.NavigateTo("/offers");
                }
                else if (role == "CUSTOMER")
                {
                    Navigation.NavigateTo("/offers");
                }
                else
                {
                    // Default fallback route for other roles
                    Navigation.NavigateTo("/unauthorized");
                }
            }
            else
            {
                // Redirect to unauthorized if no role is found
                Navigation.NavigateTo("/unauthorized");
            }
        }
    };

}